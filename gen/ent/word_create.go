// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/gen/ent/word"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordCreate is the builder for creating a Word entity.
type WordCreate struct {
	config
	mutation *WordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (wc *WordCreate) SetName(s string) *WordCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wc *WordCreate) SetNillableName(s *string) *WordCreate {
	if s != nil {
		wc.SetName(*s)
	}
	return wc
}

// Mutation returns the WordMutation object of the builder.
func (wc *WordCreate) Mutation() *WordMutation {
	return wc.mutation
}

// Save creates the Word in the database.
func (wc *WordCreate) Save(ctx context.Context) (*Word, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WordCreate) SaveX(ctx context.Context) *Word {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WordCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WordCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WordCreate) check() error {
	return nil
}

func (wc *WordCreate) sqlSave(ctx context.Context) (*Word, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WordCreate) createSpec() (*Word, *sqlgraph.CreateSpec) {
	var (
		_node = &Word{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(word.Table, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(word.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Word.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WordUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wc *WordCreate) OnConflict(opts ...sql.ConflictOption) *WordUpsertOne {
	wc.conflict = opts
	return &WordUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Word.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WordCreate) OnConflictColumns(columns ...string) *WordUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WordUpsertOne{
		create: wc,
	}
}

type (
	// WordUpsertOne is the builder for "upsert"-ing
	//  one Word node.
	WordUpsertOne struct {
		create *WordCreate
	}

	// WordUpsert is the "OnConflict" setter.
	WordUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *WordUpsert) SetName(v string) *WordUpsert {
	u.Set(word.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WordUpsert) UpdateName() *WordUpsert {
	u.SetExcluded(word.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *WordUpsert) ClearName() *WordUpsert {
	u.SetNull(word.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Word.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WordUpsertOne) UpdateNewValues() *WordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Word.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WordUpsertOne) Ignore() *WordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WordUpsertOne) DoNothing() *WordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WordCreate.OnConflict
// documentation for more info.
func (u *WordUpsertOne) Update(set func(*WordUpsert)) *WordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WordUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WordUpsertOne) SetName(v string) *WordUpsertOne {
	return u.Update(func(s *WordUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WordUpsertOne) UpdateName() *WordUpsertOne {
	return u.Update(func(s *WordUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *WordUpsertOne) ClearName() *WordUpsertOne {
	return u.Update(func(s *WordUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *WordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WordCreateBulk is the builder for creating many Word entities in bulk.
type WordCreateBulk struct {
	config
	err      error
	builders []*WordCreate
	conflict []sql.ConflictOption
}

// Save creates the Word entities in the database.
func (wcb *WordCreateBulk) Save(ctx context.Context) ([]*Word, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Word, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WordCreateBulk) SaveX(ctx context.Context) []*Word {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WordCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WordCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Word.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WordUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wcb *WordCreateBulk) OnConflict(opts ...sql.ConflictOption) *WordUpsertBulk {
	wcb.conflict = opts
	return &WordUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Word.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WordCreateBulk) OnConflictColumns(columns ...string) *WordUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WordUpsertBulk{
		create: wcb,
	}
}

// WordUpsertBulk is the builder for "upsert"-ing
// a bulk of Word nodes.
type WordUpsertBulk struct {
	create *WordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Word.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WordUpsertBulk) UpdateNewValues() *WordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Word.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WordUpsertBulk) Ignore() *WordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WordUpsertBulk) DoNothing() *WordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WordCreateBulk.OnConflict
// documentation for more info.
func (u *WordUpsertBulk) Update(set func(*WordUpsert)) *WordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WordUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WordUpsertBulk) SetName(v string) *WordUpsertBulk {
	return u.Update(func(s *WordUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WordUpsertBulk) UpdateName() *WordUpsertBulk {
	return u.Update(func(s *WordUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *WordUpsertBulk) ClearName() *WordUpsertBulk {
	return u.Update(func(s *WordUpsert) {
		s.ClearName()
	})
}

// Exec executes the query.
func (u *WordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
